name: Build
on:
  push:
  pull_request:

jobs:
  cross-build-in-docker:
    runs-on: ubuntu-latest
    container:
      image: golang:1.24.4
    env:
      # Disable the build version control system to avoid issues with Containers on GitHub Actions
      GOFLAGS: "-buildvcs=false"
    steps:
      - uses: actions/checkout@v4
      - name: Make shell scripts executable
        run: find . -name "*.sh" -type f -exec chmod +x {} \;
      - name: Install cross-compilation dependencies
        run: |
          set -x
          # Enable multi-arch support for cross-compilation
          dpkg --add-architecture arm64
          apt-get update -yq
          apt-get install -yq \
            libxkbcommon-dev \
            libxkbcommon-x11-dev \
            libwayland-dev \
            libwayland-egl1-mesa \
            libvulkan-dev \
            libx11-dev \
            libx11-xcb-dev \
            libxcb1-dev \
            libxrandr-dev \
            libxinerama-dev \
            libxcursor-dev \
            libxi-dev \
            libxfixes-dev \
            libegl1-mesa-dev \
            libgl1-mesa-dev \
            libxkbcommon0 \
            libxkbcommon-x11-0 \
            libwayland-client0 \
            libwayland-cursor0 \
            libwayland-egl1 \
            libx11-6 \
            libx11-xcb1 \
            libxcb1 \
            libxcursor1 \
            libxfixes3 \
            libegl1-mesa \
            musl-dev \
            musl-tools \
            gcc-aarch64-linux-gnu \
            libc6-dev-arm64-cross \
            xvfb \
            imagemagick \
            fluxbox \
            tesseract-ocr \
            tesseract-ocr-eng \
            python3-pip \
            pipx \
            x11-utils \
            x11-xserver-utils \
            x11-apps \
            wmctrl \
            pkg-config \
            libxkbcommon-dev:arm64 \
            libxkbcommon-x11-dev:arm64 \
            libwayland-dev:arm64 \
            libwayland-egl1-mesa:arm64 \
            libvulkan-dev:arm64 \
            libx11-dev:arm64 \
            libx11-xcb-dev:arm64 \
            libxcb1-dev:arm64 \
            libxrandr-dev:arm64 \
            libxinerama-dev:arm64 \
            libxcursor-dev:arm64 \
            libxi-dev:arm64 \
            libxfixes-dev:arm64 \
            libegl1-mesa-dev:arm64 \
            libgl1-mesa-dev:arm64 \
            libxkbcommon0:arm64 \
            libxkbcommon-x11-0:arm64 \
            libwayland-client0:arm64 \
            libwayland-cursor0:arm64 \
            libwayland-egl1:arm64 \
            libx11-6:arm64 \
            libx11-xcb1:arm64 \
            libxcb1:arm64 \
            libxcursor1:arm64 \
            libxfixes3:arm64 \
            libegl1-mesa:arm64
      - name: Install img2txt
        run: |
          # Try pipx first (recommended for applications)
          if command -v pipx > /dev/null; then
            echo "Using pipx to install img2txt..."
            pipx install img2txt || {
              echo "pipx failed, falling back to pip..."
              pip3 install img2txt --break-system-packages
            }
          else
            echo "pipx not available, using pip with --break-system-packages..."
            pip3 install img2txt --break-system-packages
          fi
          
          # Verify installation
          echo "Verifying img2txt installation..."
          img2txt --help | head -5 || echo "img2txt not found in PATH"
      - name: Build
        run: |
          set -x
          export PKG_CONFIG_PATH=/usr/lib/x86_64-linux-gnu/pkgconfig:/usr/lib/aarch64-linux-gnu/pkgconfig:/usr/share/pkgconfig
          go env
          go mod vendor
          make all
      - name: Test GUI Application
        run: |
          set -x
          
          # Set up X11 environment (disable Wayland)
          export DISPLAY=:99
          export XDG_SESSION_TYPE=x11
          export XDG_RUNTIME_DIR=/tmp/runtime-root
          export WAYLAND_DISPLAY=""
          export QT_QPA_PLATFORM=xcb
          export GDK_BACKEND=x11
          mkdir -p $XDG_RUNTIME_DIR
          chmod 700 $XDG_RUNTIME_DIR
          
          # Start Xvfb virtual framebuffer  
          Xvfb :99 -screen 0 1024x768x24 -ac +extension GLX +render -noreset &
          XVFB_PID=$!
          
          # Wait for X server to start
          sleep 3
          
          # Verify X server is running
          echo "Checking X server..."
          xdpyinfo -display :99 | head -n 100
          
          # Start lightweight window manager (suppress config warnings)
          fluxbox -display :99 2>/dev/null &
          FLUXBOX_PID=$!
          
          # Wait for window manager
          sleep 3
          
          # Test the GUI application with timeout and screenshot
          echo "Testing linuxgnu-amd64 GUI application..."
          echo "Environment variables:"
          env | grep -E "(DISPLAY|XDG|WAYLAND|QT|GDK)" | sort
          
          # Run the application in background
          echo "Starting application..."
          timeout 30s ./dist/linuxgnu-amd64/demo &
          APP_PID=$!
          echo "Application PID: $APP_PID"
          
          # Wait a bit for the app to start
          sleep 3
          
          # Check if application is still running
          if ps -p $APP_PID > /dev/null; then
            echo "Application is running"
          else
            echo "Application may have exited early"
          fi
          
          # Wait more for the app to render
          sleep 5
          
          # List any windows that might be open
          echo "Windows currently open:"
          wmctrl -l 2>/dev/null || echo "No wmctrl available"
          
          # Get window information
          echo "Window tree:"
          xwininfo -tree -root | head -20 || echo "xwininfo failed"
          
          # Take multiple screenshots at different times
          echo "Taking screenshot (attempt 1)..."
          import -window root screenshot-amd64-raw.png 2>/dev/null || echo "First screenshot failed"
          
          # Wait a bit more and try again
          sleep 3
          echo "Taking screenshot (attempt 2)..."
          import -window root screenshot-amd64.png 2>/dev/null || echo "Second screenshot failed"
          
          # Try to capture specific window if GUI app is running
          if pgrep -f "demo" > /dev/null; then
            echo "Demo process is running, trying window-specific screenshot..."
            WINDOW_ID=$(xwininfo -root -tree | grep -i "hello\|demo\|gui" | head -1 | cut -d' ' -f6 || echo "")
            if [ -n "$WINDOW_ID" ]; then
              echo "Found window ID: $WINDOW_ID"
              import -window "$WINDOW_ID" screenshot-amd64-window.png 2>/dev/null || echo "Window screenshot failed"
            fi
          fi
          
          # Check screenshot files
          echo "Screenshot files created:"
          ls -la screenshot-*.png 2>/dev/null || echo "No PNG files found"
          
          # Use the best available screenshot
          if [ -f "screenshot-amd64-window.png" ] && [ -s "screenshot-amd64-window.png" ]; then
            echo "Using window-specific screenshot"
            cp screenshot-amd64-window.png screenshot-amd64.png
          elif [ -f "screenshot-amd64.png" ] && [ -s "screenshot-amd64.png" ]; then
            echo "Using full-screen screenshot"
          else
            echo "No valid screenshot captured"
          fi
          
          # Analyze screenshot if it was captured
          if [ -f "screenshot-amd64.png" ] && [ -s "screenshot-amd64.png" ]; then
            echo ""
            echo "=== IMAGE PREPROCESSING FOR OCR ==="
            
            # Create enhanced versions for better OCR
            echo "Creating enhanced images for OCR..."
            
            # High contrast version
            convert screenshot-amd64.png -contrast-stretch 0 screenshot-amd64-contrast.png 2>/dev/null || echo "Contrast enhancement failed"
            
            # Grayscale with increased contrast
            convert screenshot-amd64.png -colorspace Gray -normalize -contrast-stretch 5% screenshot-amd64-gray.png 2>/dev/null || echo "Grayscale conversion failed"
            
            # Scaled up version (OCR works better on larger text)
            convert screenshot-amd64.png -resize 200% screenshot-amd64-large.png 2>/dev/null || echo "Scaling failed"
            
            # Black and white high contrast
            convert screenshot-amd64.png -threshold 50% screenshot-amd64-bw.png 2>/dev/null || echo "B&W conversion failed"
            
            echo ""
            echo "=== OCR TEXT EXTRACTION ==="
            
            # Try OCR on multiple processed versions
            OCR_SUCCESS=false
            
            for img in screenshot-amd64.png screenshot-amd64-large.png screenshot-amd64-gray.png screenshot-amd64-contrast.png screenshot-amd64-bw.png; do
              if [ -f "$img" ]; then
                echo "Trying OCR on $img..."
                if tesseract "$img" "ocr-$(basename $img .png)" -c tessedit_char_whitelist=0123456789abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ\ .,:-! 2>/dev/null; then
                  OCR_FILE="ocr-$(basename $img .png).txt"
                  if [ -f "$OCR_FILE" ] && [ -s "$OCR_FILE" ]; then
                    echo "SUCCESS: Text detected in $img:"
                    cat "$OCR_FILE"
                    echo ""
                    # Copy successful result to main OCR file
                    cp "$OCR_FILE" screenshot-ocr.txt
                    OCR_SUCCESS=true
                    break
                  fi
                fi
              fi
            done
            
            if [ "$OCR_SUCCESS" = false ]; then
              echo "OCR failed on all image variants"
              # Still create empty file for artifact upload
              touch screenshot-ocr.txt
            else
              echo "Text summary: $(cat screenshot-ocr.txt | tr -d '\n' | tr -s ' ')"
            fi
            
            echo ""
            echo "=== ASCII ART CONVERSION ==="
            
            # Try multiple ASCII art versions with different settings
            echo "Generating ASCII art representations..."
            
            # Standard ASCII art (80 characters wide)
            if img2txt screenshot-amd64.png --maxLen 80 --antialias > ascii-standard.txt 2>/dev/null; then
              echo ""
              echo "Standard ASCII (80 chars wide) - SUCCESS"
              cat ascii-standard.txt
            else
              echo "Standard ASCII conversion failed"
            fi
            
            echo ""
            echo "--- Compact ASCII (60 chars) ---"
            # Compact version  
            if img2txt screenshot-amd64.png --maxLen 60 --fontSize 8 --antialias > ascii-compact.txt 2>/dev/null; then
              echo "Compact ASCII - SUCCESS"
              cat ascii-compact.txt
            else
              echo "Compact ASCII conversion failed"
            fi
            
            echo ""
            echo "--- ANSI Colored ASCII ---"
            # ANSI colored version
            if img2txt screenshot-amd64.png --maxLen 70 --ansi --antialias --dither --targetAspect=0.5 > ascii-colored.txt 2>/dev/null; then
              echo "ANSI colored ASCII - SUCCESS"
              cat ascii-colored.txt
            else
              echo "ANSI colored ASCII conversion failed"
            fi
            
            echo ""
            echo "=== IMAGE INFO ==="
            if identify screenshot-amd64.png 2>/dev/null; then
              echo "Image analysis completed"
            else
              echo "Image info failed"
            fi
          else
            echo "No valid screenshot to analyze"
          fi
          
          # Kill the application
          kill $APP_PID 2>/dev/null || true
          wait $APP_PID 2>/dev/null || true
          
          # Clean up
          kill $FLUXBOX_PID 2>/dev/null || true
          kill $XVFB_PID 2>/dev/null || true
          
          echo "GUI test completed"
      - name: Upload Build Artifacts
        uses: actions/upload-artifact@v4
        with:
          name: binaries
          path: dist
          compression-level: 0
          retention-days: 1
      - name: Upload Screenshot and Analysis
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: gui-analysis
          path: |
            screenshot*.png
            ocr*.txt
            ascii*.txt
            *.xwd
          retention-days: 1
