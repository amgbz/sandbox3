name: Build
on:
  push:
  pull_request:

jobs:
  cross-build-in-docker:
    runs-on: ubuntu-latest
    container:
      image: golang:1.24.4
    env:
      # Disable the build version control system to avoid issues with Containers on GitHub Actions
      GOFLAGS: "-buildvcs=false"
    steps:
      - uses: actions/checkout@v4
      - name: Make shell scripts executable
        run: find . -name "*.sh" -type f -exec chmod +x {} \;
      - name: Install cross-compilation dependencies
        run: |
          set -x
          # Enable multi-arch support for cross-compilation
          dpkg --add-architecture arm64
          apt-get update -yq
          apt-get install -yq \
            libxkbcommon-dev \
            libxkbcommon-x11-dev \
            libwayland-dev \
            libwayland-egl1-mesa \
            libvulkan-dev \
            libx11-dev \
            libx11-xcb-dev \
            libxcb1-dev \
            libxrandr-dev \
            libxinerama-dev \
            libxcursor-dev \
            libxi-dev \
            libxfixes-dev \
            libegl1-mesa-dev \
            libgl1-mesa-dev \
            libxkbcommon0 \
            libxkbcommon-x11-0 \
            libwayland-client0 \
            libwayland-cursor0 \
            libwayland-egl1 \
            libx11-6 \
            libx11-xcb1 \
            libxcb1 \
            libxcursor1 \
            libxfixes3 \
            libegl1-mesa \
            musl-dev \
            musl-tools \
            gcc-aarch64-linux-gnu \
            libc6-dev-arm64-cross \
            xvfb \
            imagemagick \
            fluxbox \
            tesseract-ocr \
            tesseract-ocr-eng \
            python3-pip \
            python3-venv \
            x11-utils \
            x11-xserver-utils \
            x11-apps \
            wmctrl \
            pkg-config \
            file \
            libxkbcommon-dev:arm64 \
            libxkbcommon-x11-dev:arm64 \
            libwayland-dev:arm64 \
            libwayland-egl1-mesa:arm64 \
            libvulkan-dev:arm64 \
            libx11-dev:arm64 \
            libx11-xcb-dev:arm64 \
            libxcb1-dev:arm64 \
            libxrandr-dev:arm64 \
            libxinerama-dev:arm64 \
            libxcursor-dev:arm64 \
            libxi-dev:arm64 \
            libxfixes-dev:arm64 \
            libegl1-mesa-dev:arm64 \
            libgl1-mesa-dev:arm64 \
            libxkbcommon0:arm64 \
            libxkbcommon-x11-0:arm64 \
            libwayland-client0:arm64 \
            libwayland-cursor0:arm64 \
            libwayland-egl1:arm64 \
            libx11-6:arm64 \
            libx11-xcb1:arm64 \
            libxcb1:arm64 \
            libxcursor1:arm64 \
            libxfixes3:arm64 \
            libegl1-mesa:arm64
      - name: Install chafa
        run: |
          echo "Installing chafa for ASCII art conversion..."
          apt-get update -yq
          apt-get install -yq chafa
          
          # Verify installation
          echo "Verifying chafa installation..."
          chafa --version || echo "chafa verification failed"
          chafa --help | head -10 || echo "chafa help failed"
          
          # Test with a simple image conversion
          echo "Testing chafa with a simple test..."
          echo "P3 3 3 255 255 0 0 0 255 0 0 0 255 255 255 255 255 255 255 0 255 0 0 0 255 0" > test.ppm
          chafa test.ppm || echo "chafa test failed"
          rm -f test.ppm
      - name: Build
        run: |
          set -x
          export PKG_CONFIG_PATH=/usr/lib/x86_64-linux-gnu/pkgconfig:/usr/lib/aarch64-linux-gnu/pkgconfig:/usr/share/pkgconfig
          go env
          go mod vendor
          make all
      - name: Test GUI Application
        run: |
          set -x
          
          # Set up X11 environment (disable Wayland)
          export DISPLAY=:99
          export XDG_SESSION_TYPE=x11
          export XDG_RUNTIME_DIR=/tmp/runtime-root
          export WAYLAND_DISPLAY=""
          export QT_QPA_PLATFORM=xcb
          export GDK_BACKEND=x11
          mkdir -p $XDG_RUNTIME_DIR
          chmod 700 $XDG_RUNTIME_DIR
          
          # Start Xvfb virtual framebuffer  
          Xvfb :99 -screen 0 1024x768x24 -ac +extension GLX +render -noreset &
          XVFB_PID=$!
          
          # Wait for X server to start
          sleep 3
          
          # Verify X server is running
          echo "Checking X server..."
          xdpyinfo -display :99 | head -n 100
          
          # Start lightweight window manager (suppress config warnings)
          fluxbox -display :99 2>/dev/null &
          FLUXBOX_PID=$!
          
          # Wait for window manager
          sleep 3
          
          # Test the GUI application with timeout and screenshot
          echo "Testing linuxgnu-amd64 GUI application..."
          echo "Environment variables:"
          env | grep -E "(DISPLAY|XDG|WAYLAND|QT|GDK)" | sort
          
          # Run the application in background
          echo "Starting application..."
          timeout 30s ./dist/linuxgnu-amd64/demo &
          APP_PID=$!
          echo "Application PID: $APP_PID"
          
          # Wait a bit for the app to start
          sleep 3
          
          # Check if application is still running
          if ps -p $APP_PID > /dev/null; then
            echo "Application is running"
          else
            echo "Application may have exited early"
          fi
          
          # Wait more for the app to render
          sleep 5
          
          # List any windows that might be open
          echo "Windows currently open:"
          wmctrl -l 2>/dev/null || echo "No wmctrl available"
          
          # Get window information
          echo "Window tree:"
          xwininfo -tree -root | head -20 || echo "xwininfo failed"
          
          # Take multiple screenshots at different times
          echo "Taking screenshot (attempt 1)..."
          import -window root screenshot-amd64-raw.png 2>/dev/null || echo "First screenshot failed"
          
          # Wait a bit more and try again
          sleep 3
          echo "Taking screenshot (attempt 2)..."
          import -window root screenshot-amd64.png 2>/dev/null || echo "Second screenshot failed"
          
          # Try to capture specific window if GUI app is running
          if pgrep -f "demo" > /dev/null; then
            echo "Demo process is running, trying window-specific screenshot..."
            WINDOW_ID=$(xwininfo -root -tree | grep -i "hello\|demo\|gui" | head -1 | cut -d' ' -f6 || echo "")
            if [ -n "$WINDOW_ID" ]; then
              echo "Found window ID: $WINDOW_ID"
              import -window "$WINDOW_ID" screenshot-amd64-window.png 2>/dev/null || echo "Window screenshot failed"
            fi
          fi
          
          # Check screenshot files
          echo "Screenshot files created:"
          ls -la screenshot-*.png 2>/dev/null || echo "No PNG files found"
          
          # Use the best available screenshot
          if [ -f "screenshot-amd64-window.png" ] && [ -s "screenshot-amd64-window.png" ]; then
            echo "Using window-specific screenshot"
            cp screenshot-amd64-window.png screenshot-amd64.png
          elif [ -f "screenshot-amd64.png" ] && [ -s "screenshot-amd64.png" ]; then
            echo "Using full-screen screenshot"
          else
            echo "No valid screenshot captured"
          fi
          
          # Analyze screenshot if it was captured
          if [ -f "screenshot-amd64.png" ] && [ -s "screenshot-amd64.png" ]; then
            echo ""
            echo "=== IMAGE PREPROCESSING FOR OCR ==="
            
            # Create enhanced versions for better OCR
            echo "Creating enhanced images for OCR..."
            
            # High contrast version
            convert screenshot-amd64.png -contrast-stretch 0 screenshot-amd64-contrast.png 2>/dev/null || echo "Contrast enhancement failed"
            
            # Grayscale with increased contrast
            convert screenshot-amd64.png -colorspace Gray -normalize -contrast-stretch 5% screenshot-amd64-gray.png 2>/dev/null || echo "Grayscale conversion failed"
            
            # Scaled up version (OCR works better on larger text)
            convert screenshot-amd64.png -resize 200% screenshot-amd64-large.png 2>/dev/null || echo "Scaling failed"
            
            # Black and white high contrast
            convert screenshot-amd64.png -threshold 50% screenshot-amd64-bw.png 2>/dev/null || echo "B&W conversion failed"
            
            echo ""
            echo "=== OCR TEXT EXTRACTION ==="
            
            # Try OCR on multiple processed versions
            OCR_SUCCESS=false
            
            for img in screenshot-amd64.png screenshot-amd64-large.png screenshot-amd64-gray.png screenshot-amd64-contrast.png screenshot-amd64-bw.png; do
              if [ -f "$img" ]; then
                echo "Trying OCR on $img..."
                if tesseract "$img" "ocr-$(basename $img .png)" -c tessedit_char_whitelist=0123456789abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ\ .,:-! 2>/dev/null; then
                  OCR_FILE="ocr-$(basename $img .png).txt"
                  if [ -f "$OCR_FILE" ] && [ -s "$OCR_FILE" ]; then
                    echo "SUCCESS: Text detected in $img:"
                    cat "$OCR_FILE"
                    echo ""
                    # Copy successful result to main OCR file
                    cp "$OCR_FILE" screenshot-ocr.txt
                    OCR_SUCCESS=true
                    break
                  fi
                fi
              fi
            done
            
            if [ "$OCR_SUCCESS" = false ]; then
              echo "OCR failed on all image variants"
              # Still create empty file for artifact upload
              touch screenshot-ocr.txt
            else
              echo "Text summary: $(cat screenshot-ocr.txt | tr -d '\n' | tr -s ' ')"
            fi
            
            echo ""
            echo "=== ASCII ART CONVERSION ==="
            
            # Try multiple ASCII art versions with different settings using chafa
            echo "Generating ASCII art representations with chafa..."
            echo "Chafa version: $(chafa --version 2>/dev/null || echo 'unknown')"
            
            # Test if chafa is working first
            echo "Testing chafa with screenshot file..."
            if ! chafa screenshot-amd64.png -s 40x20 > /dev/null 2>&1; then
              echo "chafa cannot process the screenshot file, trying to debug..."
              ls -la screenshot-amd64.png
              file screenshot-amd64.png || echo "file command not available"
              echo "Trying basic chafa without options..."
              chafa screenshot-amd64.png 2>&1 | head -5 || echo "Basic chafa failed"
            fi
            
            # Standard ASCII art (80 characters wide)
            echo "Attempting standard ASCII conversion..."
            if chafa screenshot-amd64.png -s 80x60 > ascii-standard.txt 2>&1; then
              if [ -s ascii-standard.txt ]; then
                echo ""
                echo "Standard ASCII (80 chars wide) - SUCCESS"
                cat ascii-standard.txt
              else
                echo "Standard ASCII conversion created empty file"
              fi
            else
              echo "Standard ASCII conversion failed, trying basic chafa..."
              if chafa screenshot-amd64.png > ascii-standard.txt 2>&1; then
                echo "Basic ASCII - SUCCESS"
                cat ascii-standard.txt
              else
                echo "All ASCII conversion attempts failed"
              fi
            fi
            
            echo ""
            echo "--- Compact ASCII (60 chars) ---"
            # Compact version  
            if chafa screenshot-amd64.png -s 60x40 > ascii-compact.txt 2>&1; then
              if [ -s ascii-compact.txt ]; then
                echo "Compact ASCII - SUCCESS"
                cat ascii-compact.txt
              else
                echo "Compact ASCII conversion created empty file"
              fi
            else
              echo "Compact ASCII conversion failed"
            fi
            
            echo ""
            echo "--- ANSI Colored ASCII ---"
            # ANSI colored version with colors
            if chafa screenshot-amd64.png -s 70x50 -c 256 > ascii-colored.txt 2>&1; then
              if [ -s ascii-colored.txt ]; then
                echo "ANSI colored ASCII - SUCCESS"
                cat ascii-colored.txt
              else
                echo "ANSI colored ASCII conversion created empty file"
              fi
            else
              echo "ANSI colored ASCII conversion failed"
            fi
            
            echo ""
            echo "--- Simple ASCII (no color) ---"
            # Simple ASCII version without colors
            if chafa screenshot-amd64.png -s 80x60 -c 2 > ascii-simple.txt 2>&1; then
              if [ -s ascii-simple.txt ]; then
                echo "Simple ASCII - SUCCESS"
                cat ascii-simple.txt
              else
                echo "Simple ASCII conversion created empty file"
              fi
            else
              echo "Simple ASCII conversion failed"
            fi
            
            echo ""
            echo "=== IMAGE INFO ==="
            if identify screenshot-amd64.png 2>/dev/null; then
              echo "Image analysis completed"
            else
              echo "Image info failed"
            fi
          else
            echo "No valid screenshot to analyze"
          fi
          
          # Kill the application
          kill $APP_PID 2>/dev/null || true
          wait $APP_PID 2>/dev/null || true
          
          # Clean up
          kill $FLUXBOX_PID 2>/dev/null || true
          kill $XVFB_PID 2>/dev/null || true
          
          echo "GUI test completed"
      - name: Install Wine
        run: |
          set -x
          
          # Install Wine from WineHQ repository (includes bcryptprimitives.dll in 9.0+)
          echo "Installing Wine from WineHQ repository..."
          
          # Add WineHQ repository
          dpkg --add-architecture i386
          mkdir -pm755 /etc/apt/keyrings
          wget -O /etc/apt/keyrings/winehq-archive.key https://dl.winehq.org/wine-builds/winehq.key
          wget -NP /etc/apt/sources.list.d/ https://dl.winehq.org/wine-builds/ubuntu/dists/jammy/winehq-jammy.sources
          
          # Update package list
          apt-get update -yq
          
          # Install Wine development version (10.9+ with improved EGL support) from WineHQ
          # Try installing wine-devel directly first, then winehq-devel
          apt-get install -yq wine-devel xvfb curl || {
            echo "Direct wine-devel installation failed, trying winehq-devel without recommends..."
            apt-get install -yq winehq-devel xvfb curl || {
              echo "winehq-devel installation failed, falling back to winehq-staging..."
              apt-get install -yq winehq-staging xvfb curl || {
                echo "All Wine devel versions failed, falling back to stable..."
                apt-get install -yq winehq-stable xvfb curl
              }
            }
          }
          
          # Verify Wine installation
          echo "========================================="
          echo "Wine Installation Verification"
          echo "========================================="
          wine --version || echo "Wine version check failed"
          echo "Wine path: $(which wine)"
          echo "Wine prefix: $WINEPREFIX"
          echo "Wine architecture: $WINEARCH"
          echo "========================================="
          
          # Download and install winetricks
          echo "Installing winetricks..."
          curl -o /usr/local/bin/winetricks https://raw.githubusercontent.com/Winetricks/winetricks/master/src/winetricks
          chmod +x /usr/local/bin/winetricks
          
          # Verify winetricks installation
          winetricks --version || echo "winetricks version check failed"

      - name: Test Windows GUI Application with Wine
        continue-on-error: true
        run: |
          set -x

          # Set up Wine environment
          export WINEARCH=win64
          export WINEPREFIX=/tmp/wine-prefix
          export DISPLAY=:98
          
          # Initialize Wine (suppress output)
          echo "Initializing Wine..."
          wine --version
          wineboot --init 2>/dev/null || true
          
          # Install minimal Windows components
          echo "Installing basic Windows components..."
          winetricks -q corefonts 2>/dev/null || echo "corefonts installation failed"
          
          # Configure Wine graphics settings for Go GUI app compatibility
          echo "Configuring Wine graphics settings for Go applications..."
          # Force software rendering to avoid graphics driver issues
          wine reg add "HKEY_CURRENT_USER\\Software\\Wine\\Direct3D" /v "VideoMemorySize" /t REG_SZ /d "512" /f 2>/dev/null || true
          wine reg add "HKEY_CURRENT_USER\\Software\\Wine\\Direct3D" /v "OffscreenRenderingMode" /t REG_SZ /d "backbuffer" /f 2>/dev/null || true
          wine reg add "HKEY_CURRENT_USER\\Software\\Wine\\Direct3D" /v "UseGLSL" /t REG_SZ /d "disabled" /f 2>/dev/null || true
          wine reg add "HKEY_CURRENT_USER\\Software\\Wine\\Direct3D" /v "Multisampling" /t REG_SZ /d "disabled" /f 2>/dev/null || true
          wine reg add "HKEY_CURRENT_USER\\Software\\Wine\\Direct3D" /v "AlwaysOffscreen" /t REG_SZ /d "enabled" /f 2>/dev/null || true
          wine reg add "HKEY_CURRENT_USER\\Software\\Wine\\Direct3D" /v "DirectDrawRenderer" /t REG_SZ /d "gdi" /f 2>/dev/null || true
          
          # Disable hardware acceleration and force GDI rendering
          echo "Disabling hardware acceleration..."
          wine reg add "HKEY_CURRENT_USER\\Software\\Wine\\Direct3D" /v "renderer" /t REG_SZ /d "gdi" /f 2>/dev/null || true
          wine reg add "HKEY_CURRENT_USER\\Software\\Wine\\Direct3D" /v "MaxVersionGL" /t REG_DWORD /d "0x00010001" /f 2>/dev/null || true
          
          # Set up virtual desktop mode for better compatibility
          echo "Setting up virtual desktop mode..."
          wine reg add "HKEY_CURRENT_USER\\Software\\Wine\\Explorer" /v "Desktop" /t REG_SZ /d "Default" /f 2>/dev/null || true
          wine reg add "HKEY_CURRENT_USER\\Software\\Wine\\Explorer\\Desktops" /v "Default" /t REG_SZ /d "1024x768" /f 2>/dev/null || true
          
          # Configure DLL overrides to use Windows DLLs for graphics
          echo "Configuring DLL overrides for graphics compatibility..."
          wine reg add "HKEY_CURRENT_USER\\Software\\Wine\\DllOverrides" /v "d3d11" /t REG_SZ /d "builtin" /f 2>/dev/null || true
          wine reg add "HKEY_CURRENT_USER\\Software\\Wine\\DllOverrides" /v "dxgi" /t REG_SZ /d "builtin" /f 2>/dev/null || true
          wine reg add "HKEY_CURRENT_USER\\Software\\Wine\\DllOverrides" /v "opengl32" /t REG_SZ /d "builtin" /f 2>/dev/null || true
          
          # Set up X11 environment for Wine
          export XDG_SESSION_TYPE=x11
          export XDG_RUNTIME_DIR=/tmp/runtime-wine
          export WAYLAND_DISPLAY=""
          export QT_QPA_PLATFORM=xcb
          export GDK_BACKEND=x11
          mkdir -p $XDG_RUNTIME_DIR
          chmod 700 $XDG_RUNTIME_DIR
          
          # Start separate Xvfb for Wine test
          Xvfb :98 -screen 0 1024x768x24 -ac +extension GLX +render -noreset &
          XVFB_WINE_PID=$!
          
          # Wait for X server to start
          sleep 3
          
          # Verify X server is running
          echo "Checking Wine X server..."
          xdpyinfo -display :98 | head -n 20 || echo "Wine X server check failed"
          
          # Start lightweight window manager for Wine
          fluxbox -display :98 2>/dev/null &
          FLUXBOX_WINE_PID=$!
          
          # Wait for window manager
          sleep 3
          
          # Test the Windows GUI application with Wine
          echo "Testing Windows amd64 GUI application with Wine..."
          echo "Environment variables:"
          env | grep -E "(DISPLAY|XDG|WAYLAND|QT|GDK|WINE)" | sort
          
          # Run the Windows application with Wine in background
          echo "Starting Windows application with Wine..."
          if [ -f "./dist/windows-amd64/demo.exe" ]; then
            echo "Running Wine application with Wine 10.9+ (improved EGL support)..."
            
            # Set environment variables for better graphics compatibility
            export WINEDEBUG=-all
            export MESA_GL_VERSION_OVERRIDE=3.3
            export MESA_GLSL_VERSION_OVERRIDE=330
            export GALLIUM_DRIVER=llvmpipe
            export LIBGL_ALWAYS_SOFTWARE=1
            
            timeout 30s wine ./dist/windows-amd64/demo.exe > wine-output.log 2>&1 &
            WINE_APP_PID=$!
            echo "Wine application PID: $WINE_APP_PID"
            
            # Wait for the app to start
            sleep 5
            
            # Check if Wine application is still running
            if ps -p $WINE_APP_PID > /dev/null; then
              echo "Wine application is running successfully"
            else
              echo "Wine application may have exited early"
              
              # Check if it's a graphics-related crash (expected for Gio GUI apps)
              if grep -q "panic\|eglGetDisplay\|egl.NewContext\|dxgi_device_init\|EGL" wine-output.log 2>/dev/null; then
                                 echo "Detected EGL/graphics crash with Wine 10.9+, creating informative mock screenshot..."
                 convert -size 1024x768 xc:lightyellow \
                   -pointsize 20 -fill darkorange \
                   -draw "text 50,80 'Wine 10.9+ EGL Test Result'" \
                   -pointsize 16 -fill black \
                   -draw "text 50,120 'Status: EGL crash despite improved support'" \
                   -draw "text 50,150 'Tested: Wine 10.9+ with enhanced EGL implementation'" \
                   -draw "text 50,180 'Issue: Go Gio GUI still incompatible'" \
                   -draw "text 50,210 'Crash: eglGetDisplay() -> nil pointer dereference'" \
                   -draw "text 50,260 'Possible causes:'" \
                   -draw "text 70,290 '• Gio requires specific EGL extensions'" \
                   -draw "text 70,320 '• Wine EGL still incomplete for Go apps'" \
                   -draw "text 70,350 '• Mesa/llvmpipe compatibility issues'" \
                   -draw "text 50,400 'Next steps: Try Wine staging or native build'" \
                   -pointsize 14 -fill gray \
                   -draw "text 50,450 'Wine Version: $(wine --version 2>/dev/null || echo unknown)'" \
                   -draw "text 50,480 'Graphics: Software rendering (Mesa llvmpipe)'" \
                   -draw "text 50,510 'Test Date: $(date)'" \
                   screenshot-wine-mock.png 2>/dev/null || echo "Mock screenshot creation failed"
              else
                echo "Wine application crashed for unknown reason, creating generic mock screenshot..."
                convert -size 1024x768 xc:lightcoral \
                  -pointsize 24 -fill darkred \
                  -draw "text 50,100 'Wine Test Failed'" \
                  -pointsize 16 -fill black \
                  -draw "text 50,150 'Windows application crashed'" \
                  -draw "text 50,200 'Check wine-output.log for details'" \
                  screenshot-wine-mock.png 2>/dev/null || echo "Mock screenshot creation failed"
              fi
            fi
            
            # Always print the Wine log for debugging
            echo ""
            echo "=== WINE OUTPUT LOG ==="
            cat wine-output.log 2>/dev/null || echo "No wine output log"
            echo "=== END WINE OUTPUT LOG ==="
            echo ""
            
            # Wait more for the app to render
            sleep 5
            
            # Check what processes are running
            echo "Checking running processes..."
            ps aux | grep -E "(wine|demo)" | grep -v grep || echo "No wine/demo processes found"
            
            # Check Wine desktop windows
            echo "Checking Wine windows..."
            xwininfo -root -tree -display :98 | grep -E "(demo|Wine|Default)" || echo "No Wine windows found"
            
            # Take screenshot of Wine application
            echo "Taking Wine screenshot..."
            import -window root -display :98 screenshot-wine-amd64.png 2>/dev/null || echo "Wine screenshot failed"
            
            # Try to capture specific Wine window if it exists
            echo "Attempting to capture Wine desktop window..."
            WINE_WINDOW=$(xwininfo -root -tree -display :98 | grep "Wine desktop" | head -1 | awk '{print $1}' || echo "")
            if [ -n "$WINE_WINDOW" ]; then
              echo "Found Wine desktop window: $WINE_WINDOW"
              import -window "$WINE_WINDOW" -display :98 screenshot-wine-desktop.png 2>/dev/null || echo "Wine desktop screenshot failed"
            else
              echo "No Wine desktop window found"
            fi
            
            # Check if screenshot was created and pick the best one
            WINE_SCREENSHOT=""
            if [ -f "screenshot-wine-desktop.png" ] && [ -s "screenshot-wine-desktop.png" ]; then
              echo "Wine desktop screenshot captured successfully"
              ls -la screenshot-wine-desktop.png
              WINE_SCREENSHOT="screenshot-wine-desktop.png"
              # Copy the Wine desktop screenshot to the standard name for processing
              cp "$WINE_SCREENSHOT" screenshot-wine-amd64.png
            elif [ -f "screenshot-wine-amd64.png" ] && [ -s "screenshot-wine-amd64.png" ]; then
              echo "Wine root screenshot captured successfully"
              ls -la screenshot-wine-amd64.png
              WINE_SCREENSHOT="screenshot-wine-amd64.png"
              # Already has the right name, no need to copy
            elif [ -f "screenshot-wine-mock.png" ] && [ -s "screenshot-wine-mock.png" ]; then
              echo "Using mock screenshot for graphics failure"
              ls -la screenshot-wine-mock.png
              WINE_SCREENSHOT="screenshot-wine-mock.png"
              # Copy the mock screenshot to the standard name for processing
              cp "$WINE_SCREENSHOT" screenshot-wine-amd64.png
            else
              echo "No Wine screenshot captured"
            fi
            
            if [ -n "$WINE_SCREENSHOT" ]; then
              
              # Create 2x scaled version for better OCR
              echo "Creating 2x scaled image for OCR..."
              convert screenshot-wine-amd64.png -resize 200% screenshot-wine-amd64-2x.png 2>/dev/null || echo "2x scaling failed"
              
              # Perform OCR on 2x scaled image
              echo "Performing OCR on 2x scaled Wine screenshot..."
              if tesseract screenshot-wine-amd64-2x.png wine-ocr-2x -c tessedit_char_whitelist=0123456789abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ\ .,:-! 2>/dev/null; then
                if [ -f "wine-ocr-2x.txt" ] && [ -s "wine-ocr-2x.txt" ]; then
                  echo "Wine OCR (2x scaled) - SUCCESS:"
                  cat wine-ocr-2x.txt
                else
                  echo "Wine OCR (2x scaled) created empty file"
                fi
              else
                echo "Wine OCR (2x scaled) failed"
              fi
              
              # Generate simple ASCII art with chafa
              echo "Generating simple ASCII art from Wine screenshot..."
              if chafa screenshot-wine-amd64.png -s 80x60 -c 2 > wine-ascii-simple.txt 2>&1; then
                if [ -s wine-ascii-simple.txt ]; then
                  echo "Wine ASCII art - SUCCESS:"
                  cat wine-ascii-simple.txt
                else
                  echo "Wine ASCII art created empty file"
                fi
              else
                echo "Wine ASCII art generation failed"
              fi
            else
              echo "Wine screenshot was not captured or is empty"
            fi
            
            # Kill the Wine application
            kill $WINE_APP_PID 2>/dev/null || true
            wait $WINE_APP_PID 2>/dev/null || true
          else
            echo "Windows executable not found: ./dist/windows-amd64/demo.exe"
          fi
          
          # Clean up Wine processes
          kill $FLUXBOX_WINE_PID 2>/dev/null || true
          kill $XVFB_WINE_PID 2>/dev/null || true
          
          echo "Wine GUI test completed"
      - name: Upload Build Artifacts
        uses: actions/upload-artifact@v4
        with:
          name: binaries
          path: dist
          compression-level: 0
          retention-days: 1
      - name: Upload Screenshot and Analysis
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: gui-analysis
          path: |
            screenshot*.png
            ocr*.txt
            ascii*.txt
            wine-*.txt
            wine-*.png
            wine-*.log
            screenshot-wine-desktop.png
            screenshot-wine-mock.png
            *.xwd
          retention-days: 1
