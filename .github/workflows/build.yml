name: Build
on:
  push:
  pull_request:

jobs:
  cross-build-in-docker:
    runs-on: ubuntu-latest
    container:
      image: golang:1.24.4
    env:
      # Disable the build version control system to avoid issues with Containers on GitHub Actions
      GOFLAGS: "-buildvcs=false"
    steps:
      - uses: actions/checkout@v4
      - name: Make shell scripts executable
        run: find . -name "*.sh" -type f -exec chmod +x {} \;
      - name: Install cross-compilation dependencies
        run: |
          set -x
          # Enable multi-arch support for cross-compilation
          dpkg --add-architecture arm64
          apt-get update -yq
          apt-get install -yq \
            libxkbcommon-dev \
            libxkbcommon-x11-dev \
            libwayland-dev \
            libwayland-egl1-mesa \
            libvulkan-dev \
            libx11-dev \
            libx11-xcb-dev \
            libxcb1-dev \
            libxrandr-dev \
            libxinerama-dev \
            libxcursor-dev \
            libxi-dev \
            libxfixes-dev \
            libegl1-mesa-dev \
            libgl1-mesa-dev \
            libxkbcommon0 \
            libxkbcommon-x11-0 \
            libwayland-client0 \
            libwayland-cursor0 \
            libwayland-egl1 \
            libx11-6 \
            libx11-xcb1 \
            libxcb1 \
            libxcursor1 \
            libxfixes3 \
            libegl1-mesa \
            musl-dev \
            musl-tools \
            gcc-aarch64-linux-gnu \
            libc6-dev-arm64-cross \
            xvfb \
            imagemagick \
            fluxbox \
            tesseract-ocr \
            tesseract-ocr-eng \
            caca-utils \
            x11-utils \
            x11-xserver-utils \
            wmctrl \
            pkg-config \
            libxkbcommon-dev:arm64 \
            libxkbcommon-x11-dev:arm64 \
            libwayland-dev:arm64 \
            libwayland-egl1-mesa:arm64 \
            libvulkan-dev:arm64 \
            libx11-dev:arm64 \
            libx11-xcb-dev:arm64 \
            libxcb1-dev:arm64 \
            libxrandr-dev:arm64 \
            libxinerama-dev:arm64 \
            libxcursor-dev:arm64 \
            libxi-dev:arm64 \
            libxfixes-dev:arm64 \
            libegl1-mesa-dev:arm64 \
            libgl1-mesa-dev:arm64 \
            libxkbcommon0:arm64 \
            libxkbcommon-x11-0:arm64 \
            libwayland-client0:arm64 \
            libwayland-cursor0:arm64 \
            libwayland-egl1:arm64 \
            libx11-6:arm64 \
            libx11-xcb1:arm64 \
            libxcb1:arm64 \
            libxcursor1:arm64 \
            libxfixes3:arm64 \
            libegl1-mesa:arm64
      - name: Build
        run: |
          set -x
          export PKG_CONFIG_PATH=/usr/lib/x86_64-linux-gnu/pkgconfig:/usr/lib/aarch64-linux-gnu/pkgconfig:/usr/share/pkgconfig
          go env
          go mod vendor
          make all
      - name: Test GUI Application
        run: |
          set -x
          
          # Set up X11 environment (disable Wayland)
          export DISPLAY=:99
          export XDG_SESSION_TYPE=x11
          export XDG_RUNTIME_DIR=/tmp/runtime-root
          export WAYLAND_DISPLAY=""
          export QT_QPA_PLATFORM=xcb
          export GDK_BACKEND=x11
          mkdir -p $XDG_RUNTIME_DIR
          chmod 700 $XDG_RUNTIME_DIR
          
          # Start Xvfb virtual framebuffer  
          Xvfb :99 -screen 0 1024x768x24 -ac +extension GLX +render -noreset &
          XVFB_PID=$!
          
          # Wait for X server to start
          sleep 3
          
          # Verify X server is running
          echo "Checking X server..."
          xdpyinfo -display :99 || echo "X server check failed"
          
          # Start lightweight window manager (suppress config warnings)
          fluxbox -display :99 2>/dev/null &
          FLUXBOX_PID=$!
          
          # Wait for window manager
          sleep 3
          
          # Test the GUI application with timeout and screenshot
          echo "Testing linuxgnu-amd64 GUI application..."
          timeout 30s ./dist/linuxgnu-amd64/demo &
          APP_PID=$!
          
          # Wait a bit for the app to render
          sleep 5
          
          # List any windows that might be open
          echo "Windows currently open:"
          wmctrl -l 2>/dev/null || echo "No wmctrl available"
          
          # Take screenshot
          echo "Taking screenshot..."
          if import -window root screenshot-amd64.png; then
            echo "Screenshot captured successfully"
            ls -la screenshot-amd64.png
          else
            echo "Screenshot failed, trying alternative method..."
            xwd -root -out screenshot-amd64.xwd && convert screenshot-amd64.xwd screenshot-amd64.png || echo "All screenshot methods failed"
          fi
          
          # Analyze screenshot if it was captured
          if [ -f "screenshot-amd64.png" ] && [ -s "screenshot-amd64.png" ]; then
            echo ""
            echo "=== OCR TEXT EXTRACTION ==="
            if tesseract screenshot-amd64.png screenshot-ocr 2>/dev/null && [ -f "screenshot-ocr.txt" ]; then
              echo "Detected text:"
              cat screenshot-ocr.txt 2>/dev/null || echo "Empty OCR output"
              echo ""
              if [ -s "screenshot-ocr.txt" ]; then
                echo "Text summary: $(cat screenshot-ocr.txt | tr -d '\n' | tr -s ' ')"
              else
                echo "No text detected in image"
              fi
            else
              echo "OCR failed or no text found"
            fi
            
            echo ""
            echo "=== ASCII ART CONVERSION ==="
            if img2txt -W 80 -H 40 screenshot-amd64.png 2>/dev/null; then
              echo "ASCII art generated successfully"
            else
              echo "ASCII art conversion failed"
            fi
            
            echo ""
            echo "=== IMAGE INFO ==="
            if identify screenshot-amd64.png 2>/dev/null; then
              echo "Image analysis completed"
            else
              echo "Image info failed"
            fi
          else
            echo "No valid screenshot to analyze"
          fi
          
          # Kill the application
          kill $APP_PID 2>/dev/null || true
          wait $APP_PID 2>/dev/null || true
          
          # Clean up
          kill $FLUXBOX_PID 2>/dev/null || true
          kill $XVFB_PID 2>/dev/null || true
          
          echo "GUI test completed"
      - name: Upload Build Artifacts
        uses: actions/upload-artifact@v4
        with:
          name: binaries
          path: dist
          compression-level: 0
          retention-days: 1
      - name: Upload Screenshot and Analysis
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: gui-analysis
          path: |
            *.png
            *.txt
          retention-days: 1
